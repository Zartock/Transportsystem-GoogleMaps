@using Transportsystem_GoogleMaps.Models
@model Transportsystem_GoogleMaps.ViewModels.NewDeliveryViewModel

@{
    ViewBag.Title = "Deliveries";
}
<style>
    #map {
        height: 400px;
        width: 100%;
    }
</style>

<body>
<h2>Delivery</h2>

<p id="errors"></p>
<ul class="list-inline">
    <li>
        <div class="dropdown">
            <button class="btn btn-default dropdown-toggle" type="button" id="transportDropDown" data-toggle="dropdown" aria-haspopup="true" aria-expande>
                Transport Method 
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu" aria-labelledby="transportDropDown">
                <li><a href="#" onclick="updateMap('DRIVING')">Driving</a></li>
                <li><a href="#"onclick="updateMap('WALKING')">Walking</a></li>
                <li><a href="#"onclick="updateMap('BICYCLING')">Bicycle</a></li>
            </ul>
        </div>
    </li>
    <li>
        
        <div class="dropdown">
            <button class="btn btn-default dropdown-toggle" type="button" id="driverDropDown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                Driver
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu" aria-labelledby="driverDropDown">
                @foreach (var driver in Model.Drivers)
                {
                    <li><a href="#" onclick="getRoute('@driver.Name')">@driver.Name</a></li>
                }
            </ul>
        </div>
    </li>

    <li><button id="cluster" onclick="cluster()">Generate route</button></li>
    
    <li>
        <div class="container">
            <div class="row">
                <div class='col-sm-6'>
                    <div class="form-group">
                        <div class='input-group' id='datetimepicker1'>
                            <input type='text'  class="form-control"/>
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </div>
                </div>
                <script>
                    $(document).ready(function () {
                        $('#datetimepicker1').datetimepicker({
                            viewMode: 'days',
                            format: 'YYYY/MM/DD'
                        });
                    });
                </script>
            </div>
        </div>
    </li>
</ul>

<div id="map"></div>
<p id="traveltime"></p>
<div id="directions"></div>

<div id="driverPackages"></div>

    


</body>

<script>
    var travelTime = 0;
    var travelDistance = 0;
    var selectedRoute = 0;
    var i = 0;
    var model;
    var wholeModel;
    var directionsService;
    var directionsDisplay;
    var transportMethod = "DRIVING";
    

    function updateMap(method) {

        
        transportMethod = method;
        document.getElementById('transportDropDown').innerHTML = transportMethod + ' <span class="caret"></span>';
        calculateAndDisplayRoute(directionsService, directionsDisplay);
    }

    function initMap() {
        directionsService = new google.maps.DirectionsService;
        directionsDisplay = new google.maps.DirectionsRenderer;
        wholeModel = @Html.Raw(Json.Encode(Model.DeliveryByDriver));
        console.log(wholeModel);

        

        model = @Html.Raw(Json.Encode(new List<Package>(Model.DeliveryByDriver[Model.Drivers[0].Name])));

        var center = { lat: 59.261897775, lng: 15.30572069518922 };

        var map = new google.maps.Map(document.getElementById('map'),
            {
                zoom: 7,
                center: center
            });
        directionsDisplay.setMap(map);

        calculateAndDisplayRoute(directionsService, directionsDisplay);
    }

    function calculateAndDisplayRoute(directionsService, directionsDisplay) {
        var wayPts = [];
        for (var j = 0; j < model.length; j++) {
            wayPts.push({
                location: model[j].Destination.toString()
            });
        }
        directionsService.route({
                origin: { lat: 59.246396, lng: 15.137283 },
                destination: { lat: 59.246544, lng: 15.136656 },

                waypoints: wayPts,
                optimizeWaypoints: true,
                travelMode: transportMethod
            },
            function(response, status) {
                if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                    getTotalTime(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
    }

    function getTotalTime(result) {
        travelTime = 0;
        var routeLegs = result.routes[0].legs;
        for (var leg = 0; leg < routeLegs.length; leg++) {
            travelTime += routeLegs[leg].duration.value;
            travelDistance += routeLegs[leg].distance.value;
        }
        travelDistance /= 1000;
        document.getElementById('traveltime').innerHTML = "Total travel time: ";
        (travelTime / 3600 >= 1)
            ? document.getElementById('traveltime').innerHTML += Math.floor(travelTime / 3600) + "h " + Math.round((travelTime - 3600 * (Math.floor(travelTime / 3600))) / 60) + "min"
            : document.getElementById('traveltime').innerHTML += Math.round(travelTime / 60) + "min";
        document.getElementById('traveltime').innerHTML += "<br> Total travel distance: " + travelDistance.toFixed(2) + "km";
    }

    function cluster() {

        
        var mydatetimepicker = $('#datetimepicker1').datetimepicker();
        var dtp = mydatetimepicker.data('DateTimePicker');
        //console.log(dtp.date());
        var myDotNetDate = dtp.date().toISOString().toString().split('T')[0];
        console.log("date: " + myDotNetDate);
        console.log(JSON.stringify(myDotNetDate));


        // console.log(document.getElementById('datetimepicker').innerHTML);
       
        $.ajax({
            url: '/api/DeliveryRoute/' + myDotNetDate,
            type: 'POST',
            contentType: 'application/json;',
            success: function (data) {
                location.reload();            
            },
            error: function (response) {
                document.getElementById('errors').innerHTML = "<font color = #FF0000>" + response.responseJSON.message + "</font>";
            }
        });
    }

    function getRoute(name) {
        //console.log("Passed name: " + name);
        var data = eval(wholeModel);
        //console.log(data["Viktor"]);
        console.log(JSON.stringify(data[name]));
        model = data[name];
        $("#driverPackages").text(name + ":");
        //console.log(data[name][0]);
        for (var i = 0; i < data[name].length; i++) {
            $("#driverPackages").append("<li>" +
                "Content: " +
                data[name][i].Content +
                " Destination: " +
                data[name][i].Destination +
                " Status: " +
                data[name][i].Status +
                "</li>");
        }
        document.getElementById('driverDropDown').innerHTML = name + ' <span class="caret"></span>';
        updateMap(transportMethod);
    }
       
</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBMVIteB6a_vtVSunhpk56yZWeTSGN2CkM&callback=initMap">
</script>
@using Transportsystem_GoogleMaps.Models
@model List<Package>

@{
    ViewBag.Title = "Deliveries";
}
<style>
    #map {
        height: 400px;
        width: 100%;
    }
</style>

<body>
<h2>Delivery</h2>
<div id="map"></div>
<p id="traveltime"></p>
    
<div class="dropdown">
    <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
        Transport Method
        <span class="caret"></span>
    </button>
    <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
        <li><a href="#" onclick="updateMap('DRIVING')">Driving</a></li>
        <li><a href="#"onclick="updateMap('WALKING')">Walking</a></li>
        <li><a href="#"onclick="updateMap('BICYCLING')">Bicycle</a></li>
    </ul>
</div>
</body>

<script>
    var travelTime = 0;
    var travelDistance = 0;
    var model;
    var directionsService;
    var directionsDisplay;
    var transportMethod = "DRIVING";

    function updateMap(method) {
        transportMethod = method;
        initMap();
    }

    function initMap() {
        directionsService = new google.maps.DirectionsService;
        directionsDisplay = new google.maps.DirectionsRenderer;
        model = @Html.Raw(Json.Encode(new List<Package>(Model)));

        var center = { lat: 59.261897775, lng: 15.30572069518922 };

        var map = new google.maps.Map(document.getElementById('map'),
        {
            zoom: 7,
            center: center
        });
        directionsDisplay.setMap(map);

        calculateAndDisplayRoute(directionsService, directionsDisplay);
    }

    function calculateAndDisplayRoute(directionsService, directionsDisplay) {
        var wayPts = [];
        for (var j = 0; j < model.length; j++) {
            wayPts.push({
                location: model[j].Destination.toString()
            });
        }
        directionsService.route({
                origin: { lat: 59.246396, lng: 15.137283 },
                destination: { lat: 59.246544, lng: 15.136656 },

                waypoints: wayPts,
                optimizeWaypoints: true,
                travelMode: transportMethod
            },
            function(response, status) {
                if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                    getTotalTime(response);
                    //showSteps(response, markerArray, stepDisplay, map);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
    }

    function getTotalTime(result) {
        travelTime = 0;
        var routeLegs = result.routes[0].legs;
        for (var leg = 0; leg < routeLegs.length; leg++) {
            travelTime += routeLegs[leg].duration.value;
            travelDistance += routeLegs[leg].distance.value;
        }
        travelDistance /= 1000; 
        document.getElementById('traveltime').innerHTML = "Total travel time: ";
        (travelTime / 3600 >= 1)
            ? document.getElementById('traveltime').innerHTML += Math.floor(travelTime / 3600) + "h " + Math.round((travelTime - 3600 * (Math.floor(travelTime / 3600))) / 60) + "min"
            : document.getElementById('traveltime').innerHTML += Math.round(travelTime / 60) + "min";
        document.getElementById('traveltime').innerHTML += "<br> Total travel distance: " + travelDistance.toFixed(2) + "km";
    }

</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBMVIteB6a_vtVSunhpk56yZWeTSGN2CkM&callback=initMap">
</script>